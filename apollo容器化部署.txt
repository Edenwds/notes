logs:
	configservice: /opt/logs/configservice/
	
    adminservice: /opt/logs/adminservice/
	
	portalservice: /opt/logs/apolloportal/
	
apollo 容器化分布式部署

要达到的目的：
    
     1. 根据源码定制安装包  如修改端口  日志地址   禁止configservice作为注册中心等

	 2. 容器化部署 并使用docker compose进行服务编排
	 
	 3. 注册到同样容器部署的eureka集群，连接容器部署的mysql
	 
要解决的问题：

	1. 根据apollo官方文档，对脚本，配置文件进行修改
	
	2. docker-compose.yml 文件的编写
	
	3. 涉及容器间的通信问题
	
步骤：
   
    1.  在容器化部署的mysql中创建ApolloConfigDB 和 ApolloPortalDB数据库
	   
	2.  clone源码
	
	3. 通过分布式部署文档2.2.2部分 修改源码
	
	    比如：
			修改构建脚本scripts/build.sh 中数据库的信息  注意  这里每个环境都不一样  所以在不同环境打包时，需要重新修改
			
			配置各个环境的meta service地址   默认是dev环境  因为meta server和configservice是部署在同一个jvm进程中，所以这个地址也是apollo-configservice的地址，又因为是容器部署，这里可以写成container_name:port
			
			修改默认端口		
			分别修改apollo-configservice  apollo-adminservice  apollo-portal 项目中的  scripts/startup.sh中的SERVER_PORT   同时 三个项目的Dockerfile中 ENV 变量的默认值 可改可不改
			
			修改日志输出地址及级别
			可以分别每个项目的scripts/startup.sh中的LOG_DIR及个项目中config下的apollo-projectName.conf文件中的LOG_DIR
			
			日志级别可以修改项目的 logback.xml配置文件
			
	4. 执行./build.sh 进行编译打包 分别获取apollo-configservice  apollo-adminservice  apollo-portal 项目的安装包  

    5. 将各项目的安装包及Dockerfile上传的服务器，构建镜像

	6. 编写docker-compose.yml文件
	
		由于apollo-configservice 和 apollo-adminservice 需要将自身注册到eureka， 同时项目启动时需要读写mysql数据库，  eureka和mysql容器都在同一个docker daemon下，涉及到了容器间的通信
		
		还有apollo-portal 需要从meta server获取apollo-adminservice服务的地址， meta server 相当于eureka注册中心之上的一层封装，屏蔽了注册中心的细节，直接以api的方式提供服务地址。 这meta service 和 configservice在同一个进程中，需要和当前环境的apollo-configservice容器进行通信
		
		对于同一个docker daemon进程下的不同容器的通信 使用 bridge networks
		
		这里共有三个bridge network :  configservice   eureka   mysql  这些可以提前建好  可以在启动容器时自动创建   在提前建好时， 在docker-compose.yml文件中networks 下的所有network需要使用external 标记为true
		
		由于apollo-portal 服务依赖apollo-adminservice   在docker-compo.yml的portal服务中 添加depends_on确保容器的启动顺序
		
		针对不同项目的日志输出 可以通过volumes映射到宿主机地址 容易查看日志
	
	7. 启动  在实践过程中， 将三个服务写在一个docker-compose.yml中容易导致其他运行的容器异常退出，这里我将apollo-configservice和apollo-adminservice服务使用一个文件编排，apollo-portal单独使用一个文件编排，先启动configservice。
		
		