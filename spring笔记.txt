Spring 概念  
 1.开源的轻量级框架
 2.核心主要的两部分：
     1）aop： 面向切面变成，扩展功能不是修改源代码实现
     2）ioc：控制反转
        比如一个类，在类里面有方法（不是静态方法），调用类里面的方法，创建类的对象，使用对象调用方法，创建类对象的过程，需要new创建对象
        把对象的创建不是通过new方式实现，而是交给spring配置创建类对象
 3.spring是一站式框架
     1）spring在javaee三层结构中，每一层都提供不同的解决技术
        web层 springMVC
        service层 spring的ioc
        dao层 spring的jdbcTemplate
 4.spring版本
     1）hibernate5.x
     2）spring4.x


Spring的核心组件：Core Context Bean   Bean作为最核心的组件，因为Spring是面向Bean的编程（Bean Oriented Programming,BOP）
  

   Bean包装Object，而Object必然有数据，如何给这些数据提供生存环境就是Context要解决的问题，对Context来说它就是要发现每个Bean之间的关系，为它们建立这种关系并且维护好这种关系。所以Context就是一个Bean关系的集合，这个关系集合又叫IOC容器。Core就是发现，建立和维护每个Bean之间的关系所需要的一系列工具



















Spring的ioc操作
 1.把对象的创建交给spring进行管理
 2.ioc操作两部分
     1）ioc的配置文件方式
     2）ioc的注解方式

 ioc底层原理
   1.ioc底层原理使用技术
      1）xml配置文件
      2）dom4j解析xml
      3）工厂设计模式
      4）反射
   2.具体实现步骤：
      1）创建xml配置文件，配置要创建对象类
          <bean id="" class="类的全路径"/>
      2）创建工厂类，使用dom4j解析配置文件+反射
         使用dom4j解析xml文件 根据id值的到对应的class属性值
         String classvalue="class属性值";
         使用反射创建类对象
         Object obj=Class.forName(classvalue).getInstance();
         返回对象
         return obj;

  ioc入门案例
        做spring最基本功能时，只需导入核心jar包  Beans Core Context SpEL
        创建配置文件时，导入schema格式约束
        //加载spring配置文件 
    	 ApplicationContext context=new ClassPathXmlApplicationContext("bean1.xml");
        //得到配置创建的对象
    	 User user=(User) context.getBean("user");
    	 System.out.println(user);
    	 user.add();

  Spring的bean管理（xml方式）
  Bean实例化的方式
  1.在spring里面通过配置文件创建对象
  2.bean实例化三种方式实现
    第一种 使用类的无参构造创建（重点）
      当类中有有参构造而没有无参构造，则创建失败
    
    第二种 使用静态工厂创建
        创建静态的方法，返回类对象
    
    第三种 使用实例工厂创建
        创建实例方法，返回类对象

  Bean标签常用属性
    1）id属性 起名称 id属性值名称任意命名
       id属性值 不能包含特殊符号
       根据id值得到配置对象
    
    2）class属性：创建对象所在类的全路径
    
    3）name属性 功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号

    4）scope属性
       --singleton： 默认值 单例
       --prototype： 多例
        -request：创建对象 把对象放到request域里面
        -session           把对象放到session域里面
        -globalSession 创建对象 把对象放到globalSession中  应用场景  如 百度单次登录即可使用全部功能 不用重复登录
      

  属性注入
    1.创建对象时候，向类里面属性设置值
    2.属性注入的方式
       1）使用set方法注入（重点）
       2）使用有参数构造注入
       3）使用接口注入
    3.在spring中，支持前两种方式

  注入对象类型属性（重点）
   1.创建service类和dao类
      1）在service中得到dao
        在service类中有dao对象的set方法
      在 配置时<property name="dao对象名" ref="生成dao对象bean的id值">

  注入复杂类型属性
    1.数组
    2.list集合
    3.map集合
    4.properties类型

  IOC 和 DO区别
    1.IOC:控制反转，把对象创建交给spring进行配置
    2.DI：依赖注入，向类里面的属性设置值
    3.关系：依赖注入不能单独存在，需要在IOC基础上完成操作


  Spring整合web项目原理
    1.加载核心配置文件
      ApplicationContext context=new ClassPathXmlApplicationContext("");
      1)new 对象，功能可以实现，效率很低
    
    2.实现思想：把加载配置文件和创建对象过程，在服务器启动时候完成

    3.实现原理
      1）ServletContext对象
      2）监听器
      3）具体使用：
         在服务器启动时候，为每个项目创建一个ServletContext对象
         在ServletContext对象创建的时候，使用监听器可以具体到ServletContext对象在什么时候创建
         使用监听器听到ServletContext对象创建的时候，把创建出来的对象放到ServletContext域对象里面（serAttribute方法）
         获取对象时候，到ServletContext域得到（getAttribute方法）


 Spring的bean管理（注解）
   注解介绍
      1.代码里面特殊标记，使用注解可以完成功能
      2.注解写法 @注解名称（属性名称=属性值）
      3.注解使用在类上面，方法上面和属性上面

 Spring注解开发准备
      1.导入jar包
        导入基本的jar包
        导入aop的jar包
      2.创建类，创建方法
      3.创建spring配置文件，引入约束
         1）基本功能导入beans
         2）ioc注解开发，引入新约束  spring-context.xsd

      4.开启注解扫描
        <context:component-scan base-package="包路径"></context:component-scan>//到包里面扫面类，方法，属性上面是否有注解
        <context:annotation-config></context:annotation-config>//扫描属性上的注解
   
   注解创建对象
      1.在创建对象的类上面使用注解实现
         @Component（value="")
      2.创建对象有四个注解
         @Component
         @Controller  ：web层
         
         @Service     ：业务层

         @Repository  ：持久层

      3.创建对象单实例还是多实例
         @Scope(value="prototype")

   注解注入属性  使用注解时不需要set方法
      第一个注解 @Autowired
   ** 第二个注解 @Resource（name="创建对象注解的value值")



 AOP概念
   1.aop：面向切面（方面）编程，扩展功能不修改源代码实现
   2.AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码


 AOP原理

   aop横向抽取机制  底层使用动态代理方式实现
   第一种情况   使用jdk动态代理 针对有接口情况
    使用 动态代理方式 创建接口实现类代理对象
      创建实现接口类的平级对象，这个对象不是真正的对象，代理对象实现和实现类相同的功能

    jdk动态代理示例：
     调用Proxy的静态方法newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)返回一个指定接口的代理类实例，
     InvocationHandler 是调用处理程序的对象   实现接口 public interface InvocationHandler 每个代理实例都具有一个关联的调用处理程序，对代理实例调用方法时，将对方法调用进行编码并将其指派到它调用处理程序的invoke方法

     public class MyJDKProxy implement InvocationHandler{
          private UerDao uerDao;//需要代理的类对象
       
          public MyJDKProxy(UserDao userDao){  //使用有参构造函数对属性进行赋值
              this.userDao=userDao;
          }
          public UserDao createProxy(){
              UserDao userDaoProxy=(UserDao)Proxy.newProxyInstance(userDao.getClass().getClassLoder(),
                                            user.getClass().getInterfaces(),this);
              return userDaoproxy;
          }
          public Object invoke(Object proxy,Method method,Object[]args)throws Throwable{
              
              if("save"equals(method.getName())){   //增强的功能逻辑实现
                  System.out.println("权限校验。。。。。");
                 }
              return method.invoke(proxy,args);//实际类中的方法
          }
     }

   第二种情况 没有接口情况  使用cglib动态代理
     创建类的子类的代理对象 在子类里面调用父类的方法完成增强  因为采用的是继承，所以不能对final修饰的类进行代理
     一个需要被代理的类，也就是父类，通过字节码技术创建这个类的子类，实现动态代理
     public class SayHello {  
         public void say(){  
              System.out.println("hello everyone");  
         }  
     } 

     public class CglibProxy implements MethodInterceptor{  
         private Enhancer enhancer = new Enhancer();  
         public Object getProxy(Class clazz){  
              //设置需要创建子类的类  
              enhancer.setSuperclass(clazz);  
              enhancer.setCallback(this);  
              //通过字节码技术动态创建子类实例  
              return enhancer.create();  
         }  
          //实现MethodInterceptor接口方法  
        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy)throws Throwable {  
             System.out.println("前置代理");  
             //通过代理类调用父类中的方法  
             Object result = proxy.invokeSuper(obj, args);  
             System.out.println("后置代理");  
             return result;  
         }  
    }  

    实现类
    public class DoCGLib {  
         public static void main(String[] args) {  
              CglibProxy proxy = new CglibProxy();  
              //通过生成子类的方式创建代理类  
              SayHello proxyImp = (SayHello)proxy.getProxy(SayHello.class);  
              proxyImp.say();  
         }  
    }  



 AOP术语
   Joinpoint(连接点）：类里面可以被增强的方法，这些方法称为连接点
   Pointcut(切入点）：所谓切入点是指我们要对哪些Joinpoint进行拦截定义
   Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知（切面要完成的功能）
   Aspect(切面）：是切入点和通知（引介）的结合
  
   Introduction(引介）：是一种特殊的通知在不修改类代码的前提下，可以在运行期间为类动态的添加一些方法或Field
   Target（目标）：代理的目标对象（要增强的类）
   Weaving（织入）：是把增强应用到目标的过程 把advice应用到target的过程
   Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
   
   连接点：类里面哪些方法可以被增强，这些方法称为连接点
   切入点：在类里面可以有很多的方法被增强，比如在实际操作中，只是增强了类里面的add方法和update方法，实际增强的方法称为切入点

   通知/增强：增强的逻辑，称为增强，比如扩展日志功能，这个日志功能称为增强
      前置通知：在方法之前执行
      后置通知：在方法之后执行
      异常通知：方法出现异常
      最终通知：在后置之后执行
      环绕通知：在方法之前和之后执行

   切面：把增强应用到具体方法上面，过程称为切面， 把增强用到切入点过程



 Spring的AOP操作
  1.在spring里面进行aop操作，使用aspectj实现
    1）aspectj不是spring一部分，和spring一起使用进行aop操作
    2）Spring2.0后增加了对Aspectj的支持

  2.使用aspectj实现aop有两种方式
    1）基于aspectj的xml配置
    2）基于aspectj的注解方式


   使用表达式配置切入点
   1.切入点 实际增强的方法
   2.常用的表达式
     execution(<访问修饰符>?<返回类型><方法名>(<参数>)<异常>)
     1)execution(* cn.itcast.aop.Book.add(..))
     2)execution(* cn.itcast.aop.Book.*(..))
     3)execution(* *.*(..)）
     4）匹配所有save开头的方法 execution(* save*(..))

   配置文件编写：
    引入新的约束
    对象的创建
    配置aop
    <aop:config>
       //配置切入点
      <aop:pointcut expression="execution()" id=""/>
       //配置切面
      <aop:aspect ref="增强类id">
         <aop:before method="增强的哪个方法名作为前置增强" pointcut-ref="切入点id"/>
      </aop:aspect>
    </aop:config>


 Spring 整合web项目
   1.问题：每次访问action时候，都会加载spring配置文件
   2.解决方案：
      1）在服务器启动时候，创建对象加载配置文件
      2）底层使用监听器、Servletcontext对象
   3.在spring中不需要自己写代码实现，spring进行了封装
      1）封装了一个监听器，只需要配置监听器就可以  

      2）在配置监听器之前要导入spring整合web项目的jar包  spring-web-4.2.4.RELEASE.jar
         在web.xml文件中进行配置
         <listener>
           <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
         </listener>
      3）指定加载spring配置文件位置
   
         <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classPath:bea1.xml</param-value>//固定格式classPath:...  在src目录下直接写文件名 在包中，需写包路径 cn/itcast/bean.xml
         </context-param>
       
  基于aspectj的注解aop
    1.使用注解方式实现aop操作
      第一步 创建对象
      第二步 在spring核心配置文件中，开启aop操作
       <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
      第三步 在增强类上面使用注解完成aop操作
        @Aspect  类上注解
        @Before (value="execution(* cn.Book.*(..))") 方法上注解

   Spring的jdbcTemplate操作
    1.spring是一站式框架
      1）针对javaee三层，每一层都有解决技术
      2）在dao层，使用jdbcTemplate
    2.spring对不同的持久化层技术进行了封装

    3.jdbcTemplate使用和dbutils使用相似，都是数据库进行crud操作
   
    增加 修改 删除
    1.导入jdbcTemplate使用的jar包             
    2.创建对象，设置数据库信息
    3.创建jdbcTemplate对象，设置数据源
    4.调用jdbcTemplate对象里面的方法实现操作

    查询
    jdbcTemplate实现查询，有接口RowMapper,jabcTemplate针对这个接口没有提供实现类，得到不同的类型数据需要自己进行数据封装

    查询返回某一个值
    queryForObject(sql语句,返回值的类类型);

    查询返回对象
    queryForObject(String sql,RowMapper<T> rowMapper,Object...args);
    第一个参数是sql语句  
    第二个是RowMapper,是接口，类似于dbutils里面的接口
    第三个是可变参数

    查询返回list集合
    query(String sql,RowMapper<T> rowMapper,Object...args);:List<T>


  Spring配置连接池和dao使用jdbcTemplate
    1.Spring配置c3p0连接池
      第一步 导入jar包
      第二步 创建spring配置文件，配置连接池
             ComboPooleDataSource dataSource=new ComboPooledDataSource();
             dataSource.setDriverClass();
             dataSource.setJdbcUrl();
             dataSource.setUser();
             dataSource.setPassword();
             把代码在配置文件中进行配置


 Spring事务管理api
   1.spring事务管理两种方式
     第一种 编程式事务管理
     第二种 声明式事务管理

     何为声明式事务管理？
         采取声明的方式来管理事务，声明，就是指在配置文件中声明。用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。好处是，事务管理不侵入开发的组件。

   
        1）基于xml配置文件实现
        2）基于注解实现

   2.spring事务管理的api介绍
     PlatformTransactionManager  事务管理器（接口）
     1）针对不同的dao层框架，提供接口不同的实现类
        主要有
        org.sprpingframework.idbc.datasource.DataSourceTransactionManager 使用Spring JDBC或iBatis进行持久化数据时使用
        org.springframework.orm.hibernate5.HibernateTransactionManager  使用Hibernate5.0版本进行持久化数据时使用
     2）首先配置事务管理器

   搭建转账环境
   1.创建数据库表，添加数据
   2.创建service和dao类，完成注入关系
     1）service层又叫业务逻辑层
     2）dao层，单纯对数据库操作层，在dao层不添加业务
     3）需求两人间转账
        一人多钱一人少钱  
   3.产生问题
     如果一人少了1000后，出现异常，另一人不会多1000，前丢失了
   4.解决
     1）添加事务解决，出现异常进行回滚操作 

  事务管理xml配置
  第一步 配置事务管理器
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
   </bean>
   
  第二步 配置事务增强
   <tx:advice id="txadvice"  transaction-manager="transactionManager">
        <!--做事务操作  -->
        <tx:attributes>
           <!--设置事务操作的方法匹配规则  -->
           <tx:method name="account*" propagation="REQUIRED"/>
        </tx:attributes>
   </tx:advice>

  第三步 配置切面
   <aop:config>
       <!-- 切入点 -->
       <aop:pointcut expression="execution(* cn.Service.AService.*(..))" id="poincut1"/>
       <!-- 切面 -->
       <aop:advisor advice-ref="txadvice" pointcut-ref="poincut1"/>
   </aop:config>

 
  声明式事务管理（注解）
  第一步 配置事务管理器
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
   </bean>

  第二步 配置事务注解
   <tx:annotation-driven transaction-manager="transactionManager(事务管理器的id)"/>
  
  第三步 在要使用事务的方法所在类上面添加注解（一般是业务逻辑层）
   @Transactional
   没有添加会报错：org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread