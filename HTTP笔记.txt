HTTP是一种为分布式，协作的，超媒体信息系统，它是面向应用层的协议。

HTTP为请求提供可扩充方法集合消息头集
 
HTTP是建立在同一资源标识符（URI）的约束上的，作为一个地址（URL）或名称（URN），以指定被一个方法使用的资源。消息以一种类似于互联网邮件消息格式来传输的，互联网消息格式定义与多目的互联网邮件扩展（MIME）里


HTTP协议是一种请求/响应型的协议，
   客户端给服务器发送请求的格式是一个请求方法（request method），URI,协议版本号，然后紧接着一个包含请求修饰符（modifiers）,客户端信息，和可能的消息主体的类MIME(MIME-like）消息

   服务器对请求端发送响应的格式是以一个状态行（status line）,其后跟随一个包含服务器信息，实体元消息和可能的实体主体内容的类MIME(MIMI-like)的消息。其中状态行（status line）包含消息的协议版本号和一个成功或错误码


HTTP通信通常发生在TCP/IP连接上，默认端口是80,HTTP仅仅期望的是一个可靠的传输

大部分HTTP/1.0的实现都是对每个请求/响应（exchange）产生一个新的连接。而HTTP/1.1中，一个连接可以用于一个或更多请求/响应交换，虽然连接可能会因为各种原因中断



HTTP URL 

 http_URL = "http:" "//" host [":" port][abs_path["?" query]]
 

HTTP消息由客户到服务器的请求消息和从服务器到客户的响应消息两部分组成

两种类型的消息都由一个开始行（start-line）,零个或多个头域，一个指示头域结束的空行，最后一个可有可无的消息主体组成

消息头（Message Headers）

  HTTP头域包括常用头域，请求头域，响应头域和实体头域
 
消息主体（Message Body）

  HTTP消息的消息主体用来承载请求和响应的实体主体的

  请求中消息主体的存在是通过请求中消息头域中是否存在内容长度或传输编译码头域来通知的

  响应消息里是否包含消息主体依赖相应的请求方法和响应状态码，所有的HEAD请求方法的请求的响应消息不能包含消息主体，所有1XX（信息的），204（无内容）和304（没有修改的）的响应都不能包括一个消息主体，所有其他的响应必须包括消息主体，即使它长度可能为零



 请求（Request）
   格式：
     请求行
     通用信息头|请求头|实体头
     CRLF(回车换行）
     实体内容


   请求行（request-line）是以一个方法标记开始，后面跟随资源指示符（Request-URI）和协议版本（HTTP-Version），最后以CRLF结束
    
   请求行=方法[空格]请求URI[空格]版本号[回车换行]


      方法（Method）指明了在Request-URI指定资源上执行地方法，这种方法是大小写敏感的

         方法共有六种：GET POST PUT DELETE HEAD OPTIONS TRACE CONNECT
         响应的返回码总是通知客户某个方法对当前资源是否是被允许的
    
         如果服务器能理解某方法但此方法对请求的资源是不被允许的，服务器返回405（方法不允许）
     
         如果服务器不能识别或没有实现某个方法，返回501（没有实现）

         方法GET和HEAD必须被所有一般的服务器支持，所有其它的方法是可选的

   请求资源的识别（The Resource Identified by a Request）
   
      请求资源的精确定位是由请求里的Request-URI和Host头域决定的

   请求头域（Request Header Fields）

      请求头域允许客户端传递请求的附加信息和客户端自己的附加信息给服务器，这些头域作为请求的修饰，这和程序语言方法调用的参数语义是等价的
      
      常见的请求头：
      Accept:浏览器可接受的MIME的类型

      Accept-Charset：浏览器可接受的字符集
   
      Accept-Encoding:浏览器能够进行解码的数据编码方式

      Connection：表示是否需要持久连接。如果Servlet看到这里的值为“Keep-Alive”,或者看到请求使用的是HTTP1.1（HTTP1.1默认进行持久连接），它可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间
  
      Cookie：最重要的请求头信息之一
  

 响应（Response）接受和解析一个请求消息后，服务器发出一个HTTP响应消息

   格式
    状态行
    通用信息头|响应头|实体头
    CRLF
    实体内容
  
   状态行（Status-Line）
     响应消息的第一行是状态行，由协议版本以及数字状态码和相关的文本短语组成
     
     状态行=版本号[空格]状态码[空格]原因[回车换行]


   状态码与原因短语（Status Code and Reason Phrase）
     状态码用于控制，而原因短语是让用户便于阅读，客户端不需要检查和显示原因短语

     1XX：报告的

     2XX: 成功
     200：OK
     204：无内容
    
     3XX: 重发
     302：发现
     304：没有被改变（如果客户端已经执行了条件GET请求，并且访问服务器的资源是允许的，但是服务器上的文档并没有被改变，那么服务器应该以此状态码响应）
     305：使用代理

     4XX: 客户端出错
     400：坏请求
     403：禁用（服务器理解此请求，但拒绝满足此请求）
     404：没有找到（服务器没有找到任何可以匹配请求URI的资源）
     405：方式不被允许（此状态码表示请求行中的方法对此资源来说不被允许，响应必须包含一个Allow头域，此头域包含一系列对此请求资源有效的方法）
     408：请求超时（客户端在服务器等待的时间里不能产生请求，客户端可能在以后会重试此请求）
    
     5XX：服务器出错
     500：服务器内部错误
     502：坏网关（作为网关或代理的服务器从上游服务器接受了一个无效的响应）
     503：服务不能获得（由于服务器暂时地过载或维护，服务器不能处理请求）
     505：HTTP版本不支持


   响应头域（Response Header Fields）

    给出了有关服务器的信息以及请求RUI指定资源的更进一步访问信息

   


   
   实体（Entity）
     如果不被请求方法或响应状态码限制，请求和响应消息都可以传输实体，实体博爱扩实体头和实体主体，而有些响应只包括实体头域

     实体主体的数据类型由实体头域的Content-Type和Content-Encoding头域确定

     任一个包含了实体主体的HTTP/1.1消息都应该包括Content-Type头域以定义实体主体的媒体类型

     消息的实体主体长度指的是消息主体在被应用于传输编码（transfer-coding）之前的长度
    

 连接

   持久连接（长连接）

    目的：为获取每一个URL指定的资源都必须建立一个独立的TCP连接，加重了HTTP服务器的负担。嵌入图片与其它相关数据通常使用户在短时间内对同一服务器进行多次请求，使用长连接

   优点：
     1） 提高性能，节省内存（主机用于TCP协议控制块的内存）
     
     2） HTTP请求和响应能在连接上进行管线请求方式，管线请求方式能允许客户端执行多次请求而不用等待每一个请求的响应，并且此时只有一个TCP连接被使用，提高了效率，减少了时间，服务器必须按接受请求的顺序发送响应
  
     3） 网络阻塞会减少
 
     4） 减少了在创建TCP了连接时握手的时间消耗，使得后续请求的等待时间减少

     5） 不需要报告错误而关闭TCP连接

  
    HTTP/1.1与之前版本的显著区别是默认实现长连接，长连接提供了一种可以由客户端或服务器通知终止TCP连接的机制，利用Connection头域可以产生终止连接信号，当Connection头域包含“close”连接标记(connection-token)时，关闭连接
      
   代理：

     代理正确地实现了Connection头域的属性

     必须分别向它相连的客户端或源服务器（或其它代理）指明持久连接，每一个持久连接只能应用于一个传输层连接
 

   持久连接与流量控制（Persistent Connections and Flow Control）

     HTTP/1.1服务器应保持持久连接并使用TCP流量控制机制来解决临时过载，而不是在终止连接后指望客户端的重试，后一方法会恶化网络阻塞




 
 HTTP消息 
   
    由从客户到服务器的请求消息和从服务器到客户的响应消息两部分组成

    这两种消息都由一个开始行，零个或多个头域（经常被称作“头”），一个指示头域结束的空行（也就是以一个CRLF为前缀的什么也没有的行），最后一个可有可无的消息主体（message-body）组成

    为了健壮性，服务器应该忽略任意请求行（Request-Line）前面的空行，换句话说，如果服务器开始读消息流的时候发现了一个CRLF，它就应该忽略这个CRLF

    消息主体

       请求中的消息主体由请求中的消息头中是否存在内容长度（Cotent-Length）或传输译码（Transfer-Encoding）头决定的。
       一个消息主体不能被包含在请求方法不支持包含实体主体的请求中


       响应消息是否包含消息主体依赖性应的请求方法和响应状态码
       所有的HEAD请求方法的响应消息不能包含消息主体，即使实体头出现在请求中
       所有的1XX(消息的）,204（无内容的）和304（没有修改的）的响应都不能包括一个消息主体（message-body）
       所有其他的响应必须包括消息主体，即使它的长度可能为零

       如果一个请求包含一个消息主体并且没有给出内容长度（Content-Length）,那么服务器如果不能判断消息长度的话应该以400响应（错误的请求），或以411响应（要求长度）



 网关和代理的区别：

     网关可以进行协议转换，而代理不能，只是起代理的作用，比如缓存服务器就是一个代理


 HTTP请求方法：
   
   POST方法和PUT方法请求的区别：

        根本区别是请求URI的含义不同，POST请求的URI指示一个能处理请求实体的资源（可能是一段程序）。此资源可能是一个数据接收过程，一个网关，或者一个单独接收注释的实体。


 内容协商（Content Negotiation）

   服务器驱动协商（Server-driven Negotiation）：响应的最好表现形式是通过服务器上的算法来实现的

   代理驱动协商：用户代理选择响应的最好表现形式，这些表现形式被包含在初始响应的头域或初始响应的实体主体里，，每个表现形式被一个属于自己的URI指定

   透明协商：是服务器驱动协商和代理驱动协商的结合体，它能分发源服务器的协商工作并且能移除代理驱动协商的第二次请求的延迟，因为缓存能正确的猜测到合适的响应并返回给请求端


 HTTP中缓存

   通常应用于能通过采用缓存技术提高性能的分布式信息系统

   HTTP/1.1中缓存可以在许多情况下排除发送请求和发送完整响应，利用“过期（expiration）”机制来排除发送请求，减少了网络回路的数量，利用“验证（validation）”机制来排除发送完整响应，减少了网络应用的带宽




  常见的响应头：

     实体首部字段：
      	Allow:资源可支持的HTTP方法
      

      	Allow实体由于中列出了被请求URI（Request-URI）指定的资源所支持的方法，此头域的目的是严格的让接受端知道资源所适合的方法。
      	在405（方法不被允许）响应中必须出现Allow头域

     
      	Content-Encoding:文档编码（Encode）方法，只有在解码之后才可以得到Content-Type头指定的内容类型

      	Content-Length：表示（实体）内容长度


      	Content-Encoding:此头域使对媒体类型的修饰，当此头域出现时，其值表明对实体主体采用了和种内容编码，从而可以知道采用何种解码机制以获取Context-Type头域中指出的媒体类型。Content-Encoding头域主要目的是可以在不丢失下层媒体类型的标识下对文档进行压缩


      	如果实体的内容编码不是“identity”,那么此响应必须包含一个Content-Encoding实体头域并且列出非identity的内容编码


      	Content-Language
      	此实体头域描述了实体面向用户的自然语言，主要目的在于让用户根据自己喜爱的语言来识别和区分实体，它可以用于任意媒体类型（media type）

      	Content-Length
      	此实体头域用于指明发送给接受者实体主体（entity-body）的大小

      	Content-Location
      	此实体头域用来为消息的实体提供对应资源的位置，当此实体的访问位置独立于请求URI时

      	它的值并不能作为源请求URI的替代物，只能是陈述了请求时相应于特定实体的资源位置

      	Content-Type
      	此头域指明发送给接受者的实体主体的媒体类型

        Expires
        实体主体过期的日期时间

     


   请求首部字段：

   	Accept：Accept请求头域被用于指定哪些媒体类型的响应对请求端是可接受的
	
   	如果Accpet头域在请求消息里出现，并且如果服务器根据联合Accept头域值发现它不能发送客户端可接受的响应，那么服务器应发送406（不可接受的）响应

  
   	Accept-Charset: Accept-Charset请求头域可以用来指明哪些字符集的响应对请求端是可接受的，Accept-Charset头域使客户端能通知服务器产生哪些能让客户端更理解的字符集响应（优先字符集）

   	如果Accept-Charset头域没有出现，那么缺省情况是任何字符集会接受，如果Accept头域出现在请求消息里，并且如果服务器不能发送请求端期望的字符集的响应，那么服务器应发送一个406（不能接受的）错误状态响应，尽管发送一个不可接受的响应也是允许的


   	Accept-Encoding
   	和Accept头域类似，但Accept-Encoding是限定服务器返回给客户端可接受的内容编码（优先的内容编码）

   	如果Accept-Encoding头域再请求里出现，并且如果服务器不能发送一个Accept-Encoding头域里指定的编码响应，那么服务器应该发送一个406（不接受的）错误的响应

   	如果没有Accept-Encoding头域出现在请求消息里，服务器应该假设客户端将接受任何内容编码，在这种情况下，如果“identity”是这些可得的内容编码中的一个，那么服务器应利用“identity”内容编码，除非服务器有附加信息指明其它内容编码对客户端是有意义的


    	Authorization（授权）
   	用户代理通过在请求里包含一个Authorization请求头域请求服务器授权
   
   响应首部字段：

   	Accept-Range
   
   	Accept-Range响应头域允许服务器向客户指明服务器对范围请求的接受度（是否接受字节范围请求）

   	Age
   	Age响应头域表示发送者对响应产生（或重验证）时刻后经过的时间的估计，一个缓存的响应如果年龄内有超过它的保鲜寿命（freshness response）,那么它是保鲜的（fresh）

   	Age的值是十进制非负整数，并且以秒为单位


        ETag
        此头域提供了请求对应变量的当前实体的标签，由服务器生成

   
   
        Expect
   	此头域用于指明客户端需要的特定服务器行为

   	如果一个服务器不能理解或遵循一个请求中Expect头域的任何expection值，那么它必须以合适的错误状态码响应

     
        Host
    	此头域指明了请求资源的网络主机和端口号，必须代表源服务器或网关的命名权限，这允许源服务器或网关去区分有内在歧义的URLS
  
   	一个客户端必须在所有的HTTP/1.1请求消息里包含一个Host头域，如果请求的URI没有包含请求服务的网络主机名，那么Host头域必须给一个空值。

     	所有基于网络的HTTP/1.1服务器在接受的请求中如果缺少Host头域，必须响应400（坏请求）状态码


   通用首部字段：
   	Cache-Control

  	 此头域被用于指定在请求/响应链上所有缓存机制必须遵守的指令，这些指令防止缓存去干涉请求或响应的行为，缓存指令是单方向的，因为请求中指令的存在并不意味着同样的指令必须在响应中出现

  	 缓存控制指令：

   	 1）指定什么可以缓存，只能由源服务器指定
 
   	 2）对什么能被缓存保存的限制，可以由源服务器或用户代理指定

   	 3）对基本过期机制的改进，这可能由源服务器或用户代理指定

   	 4）对缓存重验证及重载的控制，只能由用户代理指定

   	 5）对实体传输的控制

   	 6）缓存系统的扩展


           Cache-Control的指令：

              no-cache指令: 为了防止从缓存中返回过期的资源

              客户端的请求如果包含此指令，则表示客户端不会接受缓存的响应，“中间”的缓存服务器必须把客户端请求转发给源服务器

              服务器的响应如果包含此指令，那么缓存服务器不能对资源进行缓存，源服务器也不再响应缓存服务器中的资源有效性确认，且禁止对其响应资源进行缓存操作

              no-store指令：禁止缓存任何请求或响应中包含的信息

              no-store 和 no-cache的区别:
               no-cache代表不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源
               no-stroe才是真正地不缓存



  	 指定缓存期限和认证的指令


   	 实体的过期时间可由源服务器利用“Expires”头域指定，或者也可以在响应里利用max-age缓存控制指令指定。如果一个响应的当前年龄（current age）大于max-age设定的值，那么这个响应是陈旧的（stale）,对一个响应里应用max-age缓存控制指令意味着此响应是可缓存的

   	 如果响应中同时包含Expires头域和max-age缓存控制指令，那么max-age指令覆盖Expires头域

  
    	s-maxage
        只适用于供多位用户使用的公共缓存服务器（一般指代理）

     	对于一共享缓存来说，s-maxage指定的值将会覆盖max-age缓存控制指令或Expires头域，共享缓存存在没有通过源服务器首先重新验证时不能利用它来响应后续的请求

   
        max-age指令

            当客户端发送的请求中包含max-age指令时，如果判断缓存的时间没有超过该指令指定的值，那么可以接收缓存的资源，当max-age值为0时，缓存服务器需要将请求转发给源服务器


    缓存重验证和加载控制（Cache Revalidation and Reload Controls）

    	End-to-end reload(End-to-end重新加载）
  
    	Specific end-to-end revalidation(指定的end-to-end重验证）

    

    Connection

   	 此头域允许发送者指定某些专属于某特定连接的选项，并且Connection头域不能被代理（proxy）在以后的连接中传送
	
   	 Connection头域里列出的消息头域不得包含end-to-end头域

   	 不支持持久连接的HTTP/1.1应用程序必须在每一消息中都加上“close”连接选项

    
  


   