	原生态jdbc程序中的问题总结：
 1.数据库连接，使用时创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。
   设想：使用数据库连接池管理数据库连接

 2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护。
   设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。

 3.向preparedStatement中设置参数，对占位符位置和设置参数值，硬编码在java代码中，不利于系统维护。
   设想：将sql语句及占位符和参数全部配置在xml中。

 4.从resultSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。
   设想：将查询的结果集，自动映射为java对象。


什么是Mybatis？
 持久层框架，让程序员将主要精力放到sql上，通过mybatis提供的映射方式，自由灵活生成满足需要的sql语句

  mybatis可以将向preparedStatement中输入参数自动进行输入映射，将查询结果集灵活映射成java对象（输出映射）


  MyBatis通过xml或注解的方式将要执行的这种statement（statement,preparedStatement,callableStatement）配置起来，并通过java对象和satement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回


Mybatis框架：
 1.SqlMapConfig.xml(是mybatis的全局配置文件，名称不固定的） 配置了数据源，事务等mybatis运行环境，配置映射文件（配置sql语句）mapper.xml

 2.sqlSessionFactory（会话工厂），根据配置文件创建工厂 作用：创建SqlSesison

 3.SqlSession（会话），是一个接口，面向用户（程序员）的接口 作用：操作数据库（发出sql增，删，改，查）

 4.Excutor(执行器），是一个接口（基本执行器，缓存执行器）  作用：SqlSession内部通过执行器操作数据库

 5.mapped statement(底层封装对象） 作用：对操作数据库存储封装，包括sql语句，输入参数，输出结果类型
 
 6.mysql


SqlMapConfig.xml文件  包含获取数据库连接实例的数据源（DataSource) 和决定事务作用域和控制方式的事务管理器（TransactionManager）
   配置mybatis的运行环境，数据源，事务等
   引入约束文件  在<configuration></configuration>中进行配置
   <environments default="development">

      <enviroment id="developement">
         <transactionManager type="JDBC"/> 使用jdbc事务管理，事务控制由mybatis
         <dataSource type="POOLED">
         </dataSource>  数据库连接池
      </enviroment>
   <enviroments>


映射文件
  mapper代理开发映射文件名称叫XXXMapper.xml
  在映射文件中配置sql语句
 
  <mapper namespace="test"> namespace命名空间，作用是对sql进行分类化管理，
     <select id="findUserById"  parameterType="int" resultType="实体类的全类名">
         SELECT * FROM USER WHERE id=#{id}
     </select>
  </mapper>

    id:标识映射文件中的sql，将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType:指定输入参数类型
    
    #{ }表示一个占位符，
    #{id} 其中的id表示接受输入的参数，参数名称就是id，如果输入的是简单类型，其中的参数名称可以任意，
    
    resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象

   
  在sqlMapConfig.xml中加载映射文件
   <mappers>
       <mapper resource=""/>
   </mappers>


在程序中首先要先得到mybatis配置文件进行加载
  
  String resource="SqlMapConfig.xml";
  //得到配置文件流
  InputStream inputStream=Resources.getResourceAsStream{(resource);

 创建会话工厂，传入mybatis的配置文件信息
  SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(inputStream);

  通过工厂得到SqlSession
  SqlSession sqlSession=sqlSessionFactory.openSession();

  通过sqlsession操作数据库，
  第一个参数：映射文件中statement的id，等于namespace+"."+statement的id
  第二个参数：指定和映射文件所匹配的parameterType类型的参数
  User user=sqlSession.selectOne("test.findUserById",1);

  释放资源
  sqlSession.close();

 

根据用户名称模糊查询，会返回多个结果

  输入参数类型 parameterType="java.lang.String"  resutlType="输出结果映射的java对象"

  模糊查询的sql语句  select * from user where username like '%${}%'
  
  ${}拼接sql语句  
  ${value} 当接受的参数是简单类型时，参数名称只能使用value

 
parameterType
 在映射文件中通过parameterType指定输入参数的类型

resultType
 在映射文件中通过resultType指定输出结果的类型
  
#{}和 ${}
 
 #{}表示一个占位符 #{}接受输入参数，类型可以使简单类型，pojo，hashmap
 如果接收简单类型，#{}中可以写成value或者其它名称

 #{}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取对象属性值


 ${}表示一个拼接符号，会引起sql注入，不建议使用 
 接收输入参数，类型可以是简单类型，pojo，hashmap  
 如果接收简单类型，${}中只能写成value
 ${}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取对象的属性值


添加用户
  
  映射文件
  <insert id="inserUser" parameterType="添加的java对象">
     #{} 中指定pojo的属性名，接收到pojo属性的属性值，mybatis通过OGNL获取对象的属性值
     insert into user (username,sex,birthday,address) value(#{username},#{sex},#{birthday},#{address})
  </insert>
    

自增主键返回
  mysql自增主键，执行insert提交之前自动生成一个自增主键 通过mysql函数获取到刚插入记录的自增主键 LAST_INSERT_ID()
  是insert之后调用此函数

  <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
     SELECT LAST_INSERT_ID()
  </selectKey>


  ex:

  <insert id="insertUser" parameterType="">
    
     <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
        SELECT LAST_INSERT_ID()
     </selectKey>
   
     INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})

  </insert>


非自增主键返回（使用uuid())

  使用mysql的uuid()函数生成主键，需要修改表中id字段类型为String，长度设置为35位

  执行思路：
    先通过uuid（）查询到主键，将主键输入到sql语句中
    执行uuid（）语句顺序相对于insert语句之前执行
  <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
     SELECT uuid()
  </selectKey>

 删除用户 根据id删除
 <delete id="deleteUser" parameterType="java.lang.Integer">
   delete from where id=#{id}
 </delete>

 更新用户  必须要有用户id和更新的内容 所以设置简单对象为参数
 <upadte id="updateUser" parameterType="类名">
   update user username=#{username},sex=....... where id=#{id}
 </update>


mybatis和hibernate本质区别和应用的场景
 
 hibernate：是一个标准的ORM框架（对象关系映射） 不需要程序写sql，sql语句自动生成。
 对sql语句进行优化，修改比较困难

 应用场景： 适用于需求变化不多的中小型项目，比如：后台管理系统 erp orm oa

 mybatis：专注sql本身，需要程序员自己编写sql语句，sql修改，优化比较方便，mybatis是一个不完全的ORM框架，虽然程序员自己写sql，但mydatis也可以实现映射（输入映射，输出映射）

 应用场景：适用于需求变化较多的项目，比如：互联网项目

mybatis 开发dao方法
SqlseSsionFactoryBuilder
 通过sqlsessionfactorybuilder 创建会话工厂 sqlsessionfactory
 将sqlsessionfactorybuilder当成一个工具类使用即可，不需要使用单例管理，在需要创建sqlsessionfactory时，只需要new一次sqlsessionfactorybulider即可

sqlsessionfactory

 通过sqlsessionfactory创建sqlsession，使用单例模式管理sqlsessionfactory（工厂一旦创建，使用一个实例）

sqlsession
  
 是一个面向用户的接口，提供了很多操作数据库的方法，
 sqlsession是线程不安全的，在sqlsession实现类中除了有接口中的方法，还有数据域属性
 最佳应用场合在方法体内，定义成局部变量使用

原始dao开发的问题：
1.dao接口实现类方法中存在大量的模板方法
2.调用sqlsession方法时将statement的id硬编码了
3.调用sqlsession方式时传入的变量，由于sqlsessino方法使用泛型，即使变量类型传入错误，在编译阶段也不报错，不利于开发

使用mapper代理开发dao

思路：编写mapper.xml映射文件，编写mapper接口(相当于dao接口）需要遵循一些开发规范，mybatis可以自动生成mapper接口实现类代理对象

开发规范：
1.在mapper.xml中namespace等于mapper接口地址

2.mapper.java接口中的方法名和mapper.xml中statement的id一致   

3.mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定

4.mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致

总结：开发规范主要是对下面的代码进行统一生成：
     User user=sqlSession.selectOne("test.findUserById",id);.....

mapper接口方法参数只能有一个是否影响系统开发？

   系统 框架中，dao层的代码是被业务层公用的，即使mapper接口只有一个参数，可以使用包装类型的pojo满足不同的业务方法的需求
   
   注意：持久层方法的参数可以包装类型，map... service方法中建议不要使用包装类型（不利于业务层的可扩展）


SqlMapConfig.xml
mybatis的全局配置文件SqlMapConfig.xml，配置内容如下：

properties（属性）
settings（全局配置参数）
typeAliases（类型别名）
typeHandlers（类型处理器）
objectFactory（对象工厂）
plugins（插件）
environments（环境集合属性对象）
environment（环境子属性对象）
transactionManager（事务管理）
dataSource（数据源）
mappers（映射器）

properties属性
 需求：将数据库连接参数单独配置在db.properties中，只需要在SqlMapConfig.xml中加载db.properties的属性值，在SqlMapConfig.xml中就不需要对数据库连接参数硬编码

 将数据库连接参数只配置在db.properties中，原因：方便对参数进行统一管理，其它xml可以引用该db.properties

properties特性：

注意： MyBatis 将按照下面的顺序来加载属性：
?在 properties 元素体内定义的属性首先被读取。 
?然后会读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性。 
?最后读取parameterType传递的属性，它会覆盖已读取的同名属性。

建议：
不要在properties元素体内添加任何属性值，只将属性值定义在properties文件中。
在properties文件中定义属性名要有一定的特殊性，如：XXXXX.XXXXX.XXXX


typeAliases(别名）
 需求：在mapper.xml中，定义很多的statement，statement需要parameterType指定输入参数类型，需要resultType指定输出结果的映射类型
如果在指定类型时输入类型全路径，不方便进行开发，可以针对parameterType或resultType指定的类型定义一些别名，在mapper.xml中通过别名定义，方便开发

自定义别名

在<typeAliases>标签中进行定义    
  单个定义使用<typeAlias type="" alias=""/>
  批量定义使用<package name=""/> (常用）  name指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可）


mapper（映射配置）
 1.通过resource加载单个映射文件
 2.通过mapper接口加载单个mapper
   <mapper class=""/>
   遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中  前提是：使用的是mapper代理方法
 3.批量加载mapper（推荐使用）
   <mapper name=""/> name指定mapper接口的包名，mybatis自动扫描包下所有mapper接口进行加载  
   遵顼规范： 需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中  


输入映射 --传递pojo的包装对象
  1.需求：完成用户信息的综合查询，需要传入查询条件很复杂（可能包括用户信息，其它信息，比如商品，订单等）
  2.定义包装类型pojo
     针对上边的需求，建议使用自定义的包装类型的pojo，在包装类型的pojo中将复杂的查询条件包装进去
  3.mapper.xml
    在UserMapper.xml中定义用户信息综合查询（查询条件复杂，通过高级查询进行复杂关联查询）
  4.mapper.java
    在类中创建查询方法
     public List<UserCustom> findUserList(UserQueryVo userQuerVo) throws Exception;


输出映射 resultType
 使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功
 如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象
 只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象

 需求：用户信息的综合查询列表总数，通过查询总数和上边用户综合查询列表才可以实现分页
 总结：查询出来的结果集只有一行且一列，可以使用简单类型进行输出映射

 输出pojo对象和pojo列表
  不管是输出pojo单个对象还是一个列表（list中包括pojo），在mappper.xml中resultType指定的类型是一样的
  在mapper.java指定的方法返回值类型不一样：
     输出单个pojo对象，方法返回值是单个对象类型
     输出pojo对象list，方法返回值是List<Pojo>


resultMap
 mybatis中使用resultMap完成高级输出结果映射
 查询出来的列名和pojo属性名不一致，通过定义一个resultMap对列名和pojo属性之间做一个映射关系

 使用方法：
  1.定义resultMap
  2.使用resultMap作为statement的输出映射类型
 


什么是动态sql
 mybatis核心对sql语句进行灵活操作，通过表达式进行判断，对sql进行灵活拼接，组装

 需求：用户信息综合查询列表和用户信息查询列表总数这两个statement的定义使用动态sql
      对查询条件进行判断，如果输入参数不为空才进行查询条件拼接

 mapper.xml
 使用where 和if标签进行判断
 使用where标签的好处：可以自动去除条件中第一个and
 在if标签判断时 逻辑符号用 and or


sql片段：将上边实现的动态sql判断代码块抽取出来，组成一个sql片段，其它的statement中就可以引用sql片段

定义sql片段： <sql id=""> id：sql片段的唯一标识  
引用： 在where标签中使用<include refid=""> 引用sql片段的id，如果refid指定的id不在mapper文件中，需要在前面加上namespace


foreach 向sql传递数组或List,mybatis使用foreach 解析

 需求：在用户查询列表和查询总数的statement中增加多个id输入查询
 sql语句如下：
    select * from user where id=1 or id=10 or id=16
    select * from user where id in(1,10,16)
 在输入参数类型中添加List<Integer> ids 传入多个id
 <foreach collection="" item="" open="" close="" separator=""></foreach>
 collection:指定输入对象中集合属性
 item:每个遍历生成对象
 open：开始遍历时拼接的串
 close:结束遍历时拼接的串
 separator:遍历的两个对象中需要拼接的串

第一天总结：
 
 mybatis框架执行过程：
  1.配置mybatis的配置文件，SqlMapConfig.xml(名称不固定）
  2.通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂
    SqlSessionFactory在实际使用时按单例方式
  3.通过SqlSessionFactory创建SqlSession
    SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议sqlsession应用场合在方法体内
  4.调用sqlsession的方法去操作数据
     如果需要提交事务，需要执行sqlSession的commit()方法
  5.释放资源，关闭sqlsession

 mybatis开发dao的方法：
  1.原始dao的方法：
    需要编写dao接口和实现类
    需要在dao实现类中注入一个sqlsessionfactory工厂
  
  2.mapper代理开发方法（建议使用）
    只需要编写mapper接口（就是dao接口）
    在编写mapper.xml（映射文件）和mapper.java需要遵循一个开发规范
    1.mapper.xml中namespace就是mapper.java的类全路径
    2.mapper.xml中statement的id和mapper.java中方法名一致
    3.mapper.xml中statement的parameterType指定输入参数类型和mapper.java的方法输入参数类型一致
    4.mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致
 
 SqlMapConfig.xml配置文件：可以配置properties属性，别名，mapper加载
   
  输入映射：
    parameterType:指定输入参数类型可以是简单类型，pojo，hashmap..
    对于综合查询：建议parameterType使用包装的pojo，有利于系统扩展
 
  输出映射：
    resultType：
     查询列名和resultType指定的pojo的属性名一致，才能映射成功
    resultMap：
     可以通过resultMap完成一些高级映射
    如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系），可以完成映射

    高级映射：
      将关联查询的列映射到一个pojo属性中（一对一）
      将关联查询的列映射到一个List<pojo>中 （一对多）

一对一查询：
  1.可以创建一个包装类继承包括查询字段较多的po类
  2.使用resultType映射
    使用resultType将查询结果中的订单信息映射到Orders对象中，在orders类中添加user属性，将关联查询出来的用户信息映射到orders对象中的user属性中
    在定义resultMap时，其中使用association用户映射关联查询单个对象的信息 
    <association property="" javaType="">  property：将要关联查询的用户映射到Orders中的哪个属性  javaType：映射到user的哪个属
性

  总结：
  resultType：使用比较简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即完成映射，如果没有查询结果的特殊要求建议使用resultType

  resultMap：需要单独定义resultMap，实现较繁琐，如果对查询结果有特殊要求，使用resultMap可以完成将关联查询映射pojo的属性中

  resultMap可以实现延迟加载，resultType无法实现延迟加载


一对多查询：
  需求：查询订单及订单明细的信息
  实现：1.在orders中添加list订单明细属性  private List<Orderdetail> orderdetails;
        2.在映射文件中使用resultMap  
        定义时，可以使用继承，不用再配置订单信息和用户信息的映射
        使用collection 将关联查询到多条记录映射到集合对象中
       <collection property="" ofType="">  property：将关联查询到多条记录映射到Orders哪个属性  ofType：指定映射到list集合属性中的pojo类型

  总结：
  mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中
  使用resultMap: 将订单明细映射到orders中的orderdetails中，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中

多对多查询
  需求：查询用户及用户购买商品信息
  sql：查询主表是：用户表  关联表：由于用户和商品没有直接关联，通过订单和订单明细进行关联，所以关联表为：orders orderdetail items
  
  映射思路：
  将用户信息映射到user中
  在user类中添加订单列表属性List<Orders> orderlist,将用户创建的订单映射到orderlist
  在Orders中添加订单明细列表属性List<OrderDetail>orderdetails ,将订单的明细映射到orderdetails
  在OrderDetail中添加Items属性，将订单明细所对应的商品映射到Items

 多对多查询总结：
 一对多是多对多的特例：
  查询用户购买的商品信息，用户和商品的关系是多对多关系。
  需求1：
	查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)
	企业开发中常见明细列表，用户购买商品明细列表，
	使用resultType将上边查询列映射到pojo输出。

  需求2：
	查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）
	使用resultMap将用户购买的商品明细列表映射到user对象中。

  总结：

  使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括 多个list。


resultMap总结：
 
resultType：
作用：
	将查询结果按照sql列名pojo属性名一致性映射到pojo中。
场合：
	常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。



resultMap：
	使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。

association：  使用javaType指定类型
作用：
	将关联查询信息映射到一个pojo对象中。
场合：
	为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。
	使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。
	
collection：   使用ofType指定类型
作用：
	将关联查询信息映射到一个list集合中。
场合：
	为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。
	如果使用resultType无法将查询结果映射到list集合中




延迟加载：
  resultMap可以实现高级映射（使用association,collection 实现一对一及一对多映射），association,collection具有延迟加载功能

  需求：如果查询订单并且查询用户信息，如果先查询订单信息即可满足要求，当我们需要查询用户信息时再查询用户信息，把对用户信息的按需查询就是延迟加载功能

  延迟加载：先从单表查询，需要时再从关联表去查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快

使用association实现延迟加载

  查询订单并且关联查询用户信息
   
 定义两个mapper的方法对应的statement
 1.只查询订单信息
   在查询订单的statement中使用association去延迟加载下面的statement（关联查询用户信息）
 2.关联查询用户信息
   通过上边查询到的订单信息中的user_id去关联查询用户信息
   
  延迟加载的resultMap中使用association延迟加载
  <association property="" javaType="" select="" column="">
  select:指定延迟加载需要执行的statement的id  要使用不是本映射文件中的statement需要加上namespace
  column：订单信息中关联用户信息查询的列 是user_id

测试思路：
  1.执行mapper方法，内部调用findOrderUserLazyLoading只查询orders信息
  2.在程序中去遍历上一步查询出的List<Orders>，当调用Oreders中的getUser方法时，开始进行延迟加载
  3.延迟加载，去调用findUserById

开启延迟加载的配置 使用settings进行全局配置 在SqlMapConfig.xml文件中进行配置

 <settings>
    <setting name="lazyLoadingEnabled" value="true"/> 打开延迟加载开关
    <setting name="aggressiveLazyLoading" value="false"/> 将积极加载改为消极加载
 </settings>

在SqlMapConfig.xml文件中配置标签，标签顺序必须遵循一定的顺序：
The content of element type "configuration"must match"(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)".

延迟加载：不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？

  实现方法：
  定义两个mapper方法：
  1.查询订单列表
  2.根据用户id查询用户信息
  实现思路：
  先查询第一个mapper方法，获取订单信息列表，在程序中（service），按需要调用第二个mapper方法去查询用户信息
  
  总之：使用延迟加载方法，先去查询简单的sql(最好单表，也可以关联查询），再去按需要加载关联查询的其它信息


什么是查询缓存：（提高了系统的性能）
  mybatis提供查询缓存，用于减轻数据压力，提高数据库性能
  mybatis提供一级缓存，和二级缓存

一级缓存：是sqlsession级别的缓存，在操作数据库时需要构造sqlsession对象，在对象中有一个数据结构（HashMap)，用于存储缓存数据，不同的sqlsession之间的缓存数据区域时互相不影响的
 
二级缓存：是mapper级别的缓存，多个sqlsession去操作同一个Mapper的sql语句，多个sqlsession可以公用二级缓存，二级缓存是跨sqlsession的


一级缓存的工作原理： （mybatis默认支持一级缓存，不需要在配置文件中设置）
  第一次发起查询时，先去找缓存中是否有要查找的信息，如果没有，从数据库查询用户信息，将得到的信息存储到一级缓存中
  如果sqlsession去执行commit操作（执行插入，更新，删除），清空sqlsession中的一级缓存，这样做的目的是为了让缓存中存储的是最新的信息，避免脏读
  第二次发起对同一目标的查询，直接去缓存中获取信息，不去数据库中找，提高了系统的性能


一级缓存的应用：
  正式开发时，将mybatis和spring进行整合开发，事务控制在service中，一个service中方法中包括很多mapper方法调用，当service方法执行完毕，sqlsession关闭，所以如果是执行两次service调用查询相同的用户信息，不走一级缓存，因为session方法结束，sqlsession就关闭，一级缓存就清空 


二级缓存：（首先开启二级缓存） 针对的是不同sqlsession
sqlsession1去查询用户id为1的用户信息，查询到的数据会存储到二级缓存中。
如果sqlsession3去执行相同的mapper下sql，执行commit提交，清空mapper下的二级缓存区域的数据
sqlsession2去查询用户id为1的用户信息，去缓存中找是否存在数据，如果存在直接从缓存中取出数据
 
 二级缓存和一级缓存区别：二级缓存范围更大，多个sqlsession可以共享一个UserMapper的二级缓存区域，不同的mapper有自己的二级缓存区域（按namespace区分），如果两个mapper的namespace相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中


开启二级缓存
  mybatis的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存
  在SqlMapConfig.xml中加入<setting name="cacheEnabled" value="true"/>
  在UserMapper.xml中开启缓存，UserMapper.xml下的sql执行完成会存到它的缓存区域（HashMap)   <cache/>

调用pojo类首先序列化接口：为了将缓存数据取出执行反序列化操作，因为二级缓存数据存储介质多种多样，不一定在内存

useCache配置
 在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存
  总结：针对每次查询都需要最新的数据sql，要设置成useCache=false，禁用二级缓存

刷新缓存就是清空缓存，如果不执行刷新缓存会出现脏读，设置statement配置中的flushCache="true"属性，默认情况下为true即刷新缓存，如果改成false则不会刷新。


mybatis整合ehcahe （ehcache是一个分布式缓存框架）

分布式缓存：
    系统为了提高系统并发，性能，一般对系统进行分布式部署（集群部署方式），不使用分布式缓存，缓存的数据在各个服务器单独存储，不方便系统开发，所以要使用分布式缓存对缓存数据进行集中管理。mybatis无法实现分布式缓存，需要和其它分布式缓存框架进行整合

 整合方法：
  mybatis提供了一个cache接口，如果要实现自己的缓存逻辑，实现cache接口开发即可，
  mybatis和ehcache整合，mybatis和ehcache整合包中提供了一个cache接口的实现类

 整合ehcahe：配置mapper中cache中的type为ehcache对cache接口的实现类型，在classpath下配置ehcache的配置文件

二级应用场景：
  对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度，业务场景比如：耗时较高的统计分析sql、电话账单查询sql等
   实现方法如下：通过设置刷新间隔时间，由mybatis每个一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushinterval,比如设置为30、60分钟 24小时等，根据需求而定

二级缓存的局限性：
  mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息，而不刷新其它商品的信息，因为mybatis的二级缓存区域以mapper单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空，解决此类问题需要在业务层根据需求对数据有针对性缓存。


mybatis和spring整合
  通过整合，用spring管理sqlsessionfactory、mapper接口。
  spring配置文件：
  在classpath下创建applicationContext.xml，定义数据库连接池、sqlSessionFactory
  
  1.加载数据库配置文件：<context:prperty-placeholder location="数据库配置文件路径"/>
  2.配置数据库连接池
  3.mapper配置  
     1）配置sqlSessionFactory 在定义sqlSessionFactory时指定数据源dataSource 和 mybatis的配置文件
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
           数据库连接池
          <property name="dataSource" ref="dataSource"/>
           加载mybatis的全局配置文件
          <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xm"/>
        </bean>
       
  Mapper编写的三种方法：
   1.Dao接口实现类继承SqlSessionDaoSupport
     使用此种方法即原始dao开发方法，需要编写dao接口，dao接口实现类，映射文件
 
    1）在SqlMapConfig.xml中配置映射文件的位置 使用<mappers>标签
    2）定义dao接口，dao接口实现类继承SqlSessionDaoSupport
       dao接口实现类方法中可以this.getSqlSession()进行数据增删改查
    3）spring配置
       <bean id="" class="mapper接口的实现">
           需要配置sqlSessionFactory参数
          <property name="sqlSessionFactory" ref=""/>
       </bean>

   2.使用org.mybaits.spring.mapper.MapperFactoryBean
     此方法即mapper接口开发方法，只需定义mapper接口，不用编写mapper接口实现类，每个mapper接口都需要在spring配置文件中定义
  
    1）在sqlMapConfig.xml中配置mapper.xml的位置，如果mapper.xml和mapper接口的名称相同且在同一个目录，这里可以不配置<mappers>
    2) 定义mapper接口
    3）spring中定义
       <bean id="" class="org.mybaits.spring.mapper.MapperFactoryBean">
           <property name="mapperInterface" value="mapper接口地址"/>
           <property name="slqSessionFactory" value="sqlSessionFactory"/>
       </bean>

   3,使用mapper扫描器
     此方法即mapper接口开发方法，只需定义mapper接口，不用编写mapper接口实现类，只需要在spring配置文件中定义一个mapper扫描器，自动扫描包中的mapper接口生成代理对象
    1）mapper.xml文件编写
    2）定义mapper接口  注意mapper.xml的文件名和mapper的接口名称保持一致，且放在同一个目录
    3）配置mapper扫描器
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
          <property name="basePackage" value="mapper接口包地址"></property>
          <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
      </bean>
      backPackage:扫描包路径，中间可以用逗号或分号分隔定义多个包
   4）使用扫描器从spring容器中获取mapper的实现对象
      如果将mapper.xml和mapper接口的名称保持一致且放在同一个目录中，则不用在slqMapConfig.xml中进行配置

整合出现的问题：jdk1.8 不支持 mapper扫描 使用 spring4.2版本

整合时，spring使用C3P0连接池 会出现错误：
    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [spring/applicationContext.xml]: Instantiation of bean failed; nested exception is java.lang.NoClassDefFoundError: com/mchange/v2/ser/Indirector


  原因：缺少mchange-commons-java-0.2.3.4.jar包

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

深入理解mybatis原理：
   
 1.Mybtis数据源和连接池
 
   1）数据源DataSource分类：UNPOOLED不使用连接池的数据源  POOLED使用连接池的数据源   JNDI使用JNDI实现的数据源

   2）数据源DataSource的创建过程：
      创建过程发生在mybatis的初始化的过程在中：
     
        初始化时解析mybtis的配置文件，根据<dataSource>标签type属性来创建相应类型的datasource，通过工厂模式创建对象，创建好实例后，会将其放到Configuration对象内的environment对象中，供以后使用

   3）java.sql.Connection对象的创建一直延迟到sql语句执行的时候。

   4）获取java.sql.Connection对象，使用PooledDataSource的getConnection()方法获取Connection对象的实现，最终返回的是一个connection的代理对象，使用代理对象是因为在调用connection的close方法时，调用的代理的方法，将connetion对象放到连接池中，

































